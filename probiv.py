# –ê–≤—Ç–æ—Ä https://t.me/osh1script

from aiogram import Bot, types, asyncio
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import sqlite3 as sql
from aiogram.utils.exceptions import Throttled
from aiogram.dispatcher.filters import BoundFilter
import requests
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import random
from aiogram.dispatcher import FSMContext                            
from aiogram.dispatcher.filters import Command                     
from aiogram.contrib.fsm_storage.memory import MemoryStorage        
from aiogram.dispatcher.filters.state import StatesGroup, State 
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import urllib.request
import json

from dadata import DadataAsync

oken = "5272716245:AAFVfC9OySn96H81wFogut7qbwEmLOfsolA" # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–≥

# –ê–≤—Ç–æ—Ä https://t.me/osh1script

token = "9cda453c6c4f7bb972863ded663849826d9b834c" # –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ dadata
secret = "bf035e448d7b655df28c7043dc91b5a6bf097db7" # –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ dadata
dadata = DadataAsync(token, secret)

# –ê–≤—Ç–æ—Ä https://t.me/osh1script

bot = Bot(token=oken)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ê–≤—Ç–æ—Ä https://t.me/osh1script

class meinfo(StatesGroup):
	Q3 = State()
	Q2 = State()

@dp.message_handler(commands=['start'])
async def start(message):
	await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞/ip\n\n–î–ª—è –ø—Ä–æ–±–∏–≤–∞ –ø–æ –Ω–æ–º–µ—Ä—É –≤–≤–µ–¥–∏—Ç–µ /number\n–î–ª—è –ø—Ä–æ–±–∏–≤–∞ –ø–æ IP –≤–≤–µ–¥–∏—Ç–µ /ip\n\n–ê–≤—Ç–æ—Ä - https://t.me/osh1script')

@dp.message_handler(content_types=['text'])
async def get_message(message):
	if message.text == "/number":           
		await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
		await meinfo.Q3.set()
	if message.text == "/ip":             
		await message.answer("–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å")
		await meinfo.Q2.set()

# –ê–≤—Ç–æ—Ä https://t.me/osh1script

@dp.message_handler(state=meinfo.Q3)
async def answer_q3(message: types.Message, state: FSMContext):
	answer = message.text
	await state.update_data(answer3=answer)
	data = await state.get_data()                #
	answer3 = data.get("answer3")
	result = await dadata.clean("phone", answer3)
	cont = InlineKeyboardMarkup(row_width=2)
	wh = InlineKeyboardButton("‚úÖ WhatsApp", url=f"""wa.me/{result["phone"]}""")
	ch = InlineKeyboardButton("‚úÖ –ö–∞–Ω–∞–ª –ø—Ä–æ–≥–µ—Ä–∞", url=f"https://t.me/osh1script")
	cont.add(wh, ch)

	await bot.send_message(message.from_user.id, f"""üì± –¢–µ–ª–µ—Ñ–æ–Ω: {result["number"]}
üè¨ –°—Ç—Ä–∞–Ω–∞: {result["country"]}
üè† –†–µ–≥–∏–æ–Ω: {result["region"]}
üè≠ –ì–æ—Ä–æ–¥: {result["city"]}
üïó –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {result["timezone"]}
üì∂ –û–ø–µ—Ä–∞—Ç–æ—Ä: {result["provider"]}""", reply_markup=cont)
 
	await state.finish()

@dp.message_handler(state=meinfo.Q2)
async def answer_q2(message: types.Message, state: FSMContext):
	answer = message.text
	await state.update_data(answer2=answer)
	data = await state.get_data()                #
	ip = data.get("answer2")
	url = f'https://ipapi.co/{ip}/json/'
	json = requests.get(url).json()
	await message.reply(f'–ì–æ—Ä–æ–¥: {json["city"]}\n–†–µ–≥–∏–æ–Ω: {json["region"]}\n–°—Ç—Ä–∞–Ω–∞: {json["country_name"]}\n–í–∞–ª—é—Ç–∞: {json["currency"]}\n–ù–∞—Å–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: {json["country_population"]}\n–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {json["org"]}')
	await state.finish()

# –ê–≤—Ç–æ—Ä https://t.me/osh1script

if __name__ == "__main__":
	executor.start_polling(dp, skip_updates=True)   
